---

- name: resolver | git | Ensure working directory exists
  file: 
    path="{{ item }}"
    state=directory
    mode="{{ deployment_dir_perm }}"
    owner="{{ deployment_user }}"
    group="{{ deployment_group }}"
  with_items: 
    - "{{ deployment_dir_work }}"

- name: resolver | git | clone into repo directory
  git: 
    repo="{{ deployment_git_repo }}"
    dest="{{ deployment_git_repo_dir }}"
    version="{{ deployment_version | default(omit) }}"
    accept_hostkey=yes
  become_user: "{{ deployment_git_user }}"
  register: git_resolver

- name: resolver | git | Set facts for deployment version
  set_fact:
    deployment_version:  "{{ git_resolver.after }}"

- name: resolver | git | Check if work directory exists
  stat:
    path="{{ deployment_dir_work }}"
  register: deployment_dir_work_stat

- name: resolver | git | Copy repo to work directory
  shell: rsync -rlp --exclude '.git' {{ deployment_git_repo_dir }}/ {{ deployment_dir_work }}
  when: git_resolver | changed or deployment_git_repo_force_copy or not deployment_dir_work_stat.stat.exists
  become_user: "{{ deployment_git_user }}"
  notify:
     - restart app