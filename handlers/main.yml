---

- name: set failed
  set_fact:
    notify_task_failed : True
  when: notify1 | failed or ( notify2 is defined and notify2 | failed) or (notify3 is defined and notify3| failed)

- name: restart app
  debug:
    msg="Notifier restart app"
  changed_when: "{{ deployment_post }}"
  notify:
    - check app config
    - set failed
    - execute post deployment scripts
    - set failed
    - restart app initd
    - set failed
    - wait for port to become ready
    - HTTP request
    - set failed

- name: check app config
  command: "{{ item }}"
  with_items: "{{ deployment_post_check_config | default([]) }}"
  register: notify1
  when: deployment_post_check_config is defined

- name: execute post deployment scripts
  shell: "{{ item }}"
  with_items: "{{ deployment_post_scripts | default([]) }}"
  register: notify2
  when: deployment_post_scripts is defined

- name: restart app initd
  service:
    name="{{ item.name }}"
    state="{{ item.state | default('restarted') }}"
    enabled="{{ item.enabled | default(omit)}}"
  with_items: "{{ deployment_post_services | default([]) }}"
  register: notify3
  when: deployment_post_services is defined and not notify_task_failed

- name: wait for port to become ready
  wait_for:
    port="{{ item.port }}"
    host="{{ item.host | default(inventory_hostname) }}"
    delay="{{ item.delay_sec | default(2) }}"
    timeout="{{ item.timeout_sec | default(10) }}"
  with_items: "{{ deployment_post_wait_for | default([]) }}"
  when: deployment_post_wait_for is defined and not notify_task_failed

- name: HTTP request
  uri:
    url="{{ item.url }}"
    return_content="yes"
    validate_certs="{{ item.validate_certs | default('no')}}"
    HEADER_Accept="text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
  register: page
  with_items: "{{ deployment_post_url_check | default([]) }}"
  when: deployment_post_url_check is defined and not notify_task_failed

#- name: post deployment | Fail on incorrect payload
#   fail:
#     msg="{{ deployment_artifact_name }} is not happy, {{deployment_http_check_url}} does not return expected content [{{deployment_http_check_expected_content}}]"
#   register: payload
#   when: deployment_http_check_expected_content is defined and deployment_http_check_expected_content not in webpage.content
